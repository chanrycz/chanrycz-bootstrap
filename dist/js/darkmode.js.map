{"version":3,"file":"darkmode.js","sources":["../../js/darkmode.js"],"sourcesContent":["/**\n * *bootstrap-dark-5* `darkmode.js` -- the JavaScript module - Modified by Ryan C.\n *\n * **DarkMode**\n *\n * Use this JS file, and its `darkmode` object, in your HTML to automatically capture `prefers-color-scheme` media query\n * events and also initialize tags with the `data-bs-theme` attribute, or the document root (`<HTML>` tag) with the\n * user preferred color scheme.\n *\n * The `darkmode` object can also be used to drive a dark mode toggle event, with optional persistance\n * storage in either a cookie (if GDPR consent is given) or the browsers `localStorage` object.\n *\n * The module can be loaded into a html page using a standard script command.\n * ```html\n * <script src=\"darkmode.js\"></script>\n * ```\n *\n * This will create a variable `darkmode` that is an instance of the DarkMode class.\n *\n * Once the DOM is loaded the script will then look for any html tag with a `data-bs-theme` attribute, and, if found\n * will use these tags to populate the current mode.  If this data attribute is not found then the script will use the document\n * root (`<HTML>` tag) with the `data-bs-theme` attribute with a value of `light` or `dark`\n *\n * You can also pre-initialize the mode by populating the data attribute:\n *\n * ```html\n * <html lang=\"en\" data-bs-theme=\"dark\">\n * ```\n *\n * @module DarkMode\n * @_author Vino Rodrigues, Ryan C.\n */\nclass DarkMode {\n    /** ***const*** -- Name of the cookie or localStorage->name when saving */\n    static DATA_KEY = 'chanrycz_site-theme'\n\n    /** ***const*** -- Data selector, when present in HTML will populate with `dark` or `light` as appropriate */\n    static DATA_SELECTOR = 'bs-theme'\n\n    /** ***const*** -- String used to identify light mode *(do not change)*, @see https://www.w3.org/TR/mediaqueries-5/#prefers-color-scheme */\n    static VALUE_LIGHT = 'light'\n\n    /** ***const*** -- String used to identify dark mode *(do not change)*, @see https://www.w3.org/TR/mediaqueries-5/#prefers-color-scheme */\n    static VALUE_DARK = 'dark'\n\n    /**\n     * ***property***\n     *\n     * Used to get the current state, `true` when in dark mode, `false` when in light mode or when mode not set\n     *\n     * Can also be used to set the current mode *(with no persistance saving)*\n     *\n     * @example <caption>Get if page is in \"Dark\" mode</caption>\n     * var myVal = darkmode.inDarkMode;\n     *\n     * @example <caption>Set the page to the \"Dark\" mode</caption>\n     * darkmode.inDarkMode = true;\n     *\n     * @public\n     * @type {boolean}\n     */\n    get inDarkMode() {\n        return DarkMode.getColorScheme() === DarkMode.VALUE_DARK\n    }\n\n    set inDarkMode(val) {\n        this.setDarkMode(val, false)\n    }\n\n    /** @private */\n    _hasGDPRConsent = false\n\n    /**\n     * Variable to store GDPR Consent.  This setting drives the persistance mechanism.\n     *\n     * Used in {@link #saveValue} to determine if a cookie or the `localStorage` object should be used.\n     * * Set to `true` when GDPR Consent has been given to enable storage to cookie *(useful in Server-Side knowledge of user preference)*\n     * * The setter takes care of swapping the cookie and localStorage if appropriate\n     * * Default is `false`, thus storage will use the browsers localStorage object *(Note: No expiry is set)*\n     *\n     * @example <caption>Set once GDPR consent is given by the user</caption>\n     * darkmode.hasGDPRConsent = true;\n     */\n    get hasGDPRConsent() {\n        return this._hasGDPRConsent\n    }\n\n    set hasGDPRConsent(val) {\n        this._hasGDPRConsent = val\n        if (val) {\n            // delete cookie if it exists\n            const prior = DarkMode.readCookie(DarkMode.DATA_KEY)\n            if (prior) {\n                DarkMode.saveCookie(DarkMode.DATA_KEY, '', -1)\n                localStorage.setItem(DarkMode.DATA_KEY, prior)\n            }\n        } else {\n            // delete localStorage if it exists\n            const prior = localStorage.getItem(DarkMode.DATA_KEY)\n            if (prior) {\n                localStorage.removeItem(DarkMode.DATA_KEY)\n                DarkMode.saveCookie(DarkMode.DATA_KEY, prior)\n            }\n        }\n    }\n\n    /** Expiry time in days when saving and GDPR consent is give */\n    cookieExpiry = 365\n\n    /**\n     * Saves the instance of the documentRoot (i.e. `<html>` tag) when the object is created.\n     */\n    get documentRoot() {\n        return document.getElementsByTagName('html')[0]\n    }\n\n    /**\n     * @constructor\n     * The constructor initializes the `darkmode` object (that should be used as a singleton).\n     */\n    constructor() {\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => {\n                DarkMode.onDOMContentLoaded()\n            })\n        } else {\n            DarkMode.onDOMContentLoaded()\n        }\n    }\n\n    /**\n     * Writes a cookie, assumes SameSite = Strict & path = /\n     *\n     * @private\n     * @param name -- Name of the cookie\n     * @param value -- Value to be saved\n     * @param days -- Number of days to expire the cookie\n     * @returns {void}\n     */\n    static saveCookie(name, value = '', days = 365) {\n        let exp = ''\n        if (days) {\n            const date = new Date()\n            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\n            exp = `; expires=${date.toUTCString()}`\n        }\n\n        document.cookie = `${name}=${value}${exp}; SameSite=Strict; path=/`\n    }\n\n    /**\n     * Save the current color-scheme mode\n     *\n     * @param {string} name -- Name of the cookie or localStorage->name, is dependant on {@link #hasGDPRConsent}\n     * @param {string} value -- Should be one of `light` or `dark`\n     * @param {number} days -- Number of days to expire the cookie when the cookie is used, ignored for `localStorage`\n     * @returns {void}\n     */\n    saveValue(name, value, days = this.cookieExpiry) {\n        if (this.hasGDPRConsent) {\n            // use cookies\n            DarkMode.saveCookie(name, value, days)\n        } else {\n            // use local storage\n            localStorage.setItem(name, value)\n        }\n    }\n\n    /**\n     * Reads a cookie\n     * @private\n     */\n    static readCookie(name) {\n        const n = `${name}=`\n        const parts = document.cookie.split(';')\n\n        for (const part_ of parts) {\n            const part = part_.trim()\n            if (part.startsWith(n)) {\n                // found it\n                return part.slice(n.length)\n            }\n        }\n\n        return ''\n    }\n\n    /**\n     * Retrieves the color-scheme last saved\n     *\n     * **NOTE:** is dependant on {@link #hasGDPRConsent}\n     *\n     * @param {string} name -- Name of the cookie or localStorage->name\n     * @returns {string} -- The saved value, either `light` or `dark`, or an empty string if not saved prior\n     */\n    readValue(name) {\n        if (this.hasGDPRConsent) {\n            return DarkMode.readCookie(name)\n        }\n\n        const ret = localStorage.getItem(name)\n        return ret ?? ''\n    }\n\n    /**\n     * Deletes the saved color-scheme\n     *\n     * **NOTE:** is dependant on {@link #hasGDPRConsent}\n     *\n     * @param {string} name\n     * @returns {void} -- Nothing, erasure is assumed\n     */\n    eraseValue(name) {\n        if (this.hasGDPRConsent) {\n            this.saveValue(name, '', -1)\n        } else {\n            localStorage.removeItem(name)\n        }\n    }\n\n    /**\n     * Queries the `<HTML>` tag for the current color-scheme\n     *\n     * *(This value is set prior via the {@link #setDarkMode}) function.)*\n     *\n     * @returns {string} -- The current value, either `light` or `dark`, or an empty string if not saved prior\n     */\n    getSavedColorScheme() {\n        const val = this.readValue(DarkMode.DATA_KEY)\n        return val ?? ''\n    }\n\n    /**\n     * Queries the `prefers-color-scheme` media query for the current color-scheme\n     *\n     * *(This value is set prior via the {@link #setDarkMode}) function.)*\n     *\n     * @returns {string} -- The current value, either `light` or `dark`, or an empty string if the media query is not supported\n     */\n    getPreferedColorScheme() {\n        if (\n            window.matchMedia &&\n            window.matchMedia('(prefers-color-scheme: dark)').matches\n        ) {\n            return DarkMode.VALUE_DARK\n        }\n\n        if (\n            window.matchMedia &&\n            window.matchMedia('(prefers-color-scheme: light)').matches\n        ) {\n            return DarkMode.VALUE_LIGHT\n        }\n\n        return ''\n    }\n\n    /**\n     * Sets the color-scheme in the `<HTML>` tag as a `data-bs-theme` attribute with a value of `light` or `dark`\n     *\n     * **Note:** This function will modify your document root element, i.e. the `<HTML>` tag\n     *\n     * Default behavior when setting dark mode `true`\n     *\n     * ```html\n     * <html lang=\"en\" data-bs-theme=\"dark\">\n     * ```\n     *\n     * Default behavior when setting dark mode `false`\n     *\n     * ```html\n     * <html lang=\"en\" data-bs-theme=\"light\">\n     * ```\n     *\n     * @example <caption>Set the color scheme to ***dark***, saving the state to the persistance mechanism</caption>\n     * document.querySelector('#darkmode-on-button').onclick = function(e){\n     *   darkmode.setDarkMode(true);  // save=true is default\n     * }\n     *\n     * @example <caption>Set the color scheme to ***light***, but not saving the state</caption>\n     * document.querySelector('#darkmode-off-button-no-save').onclick = function(e){\n     *   darkmode.setDarkMode(false, false);\n     * }\n     *\n     * @param {boolean} darkMode -- `true` for 'dark', `false` for 'light'\n     * @param {boolean} doSave -- If `true`, then will also call {@link #saveValue} to save that state\n     * @returns {void} -- Nothing, assumes saved\n     */\n    setDarkMode(darkMode, doSave = true) {\n        const nodeList = document.querySelectorAll(\n            `[data-${DarkMode.DATA_SELECTOR}]`\n        )\n\n        if (nodeList.length === 0) {\n            this.documentRoot.setAttribute(\n                `data-${DarkMode.DATA_SELECTOR}`,\n                darkMode ? DarkMode.VALUE_DARK : DarkMode.VALUE_LIGHT\n            )\n        } else {\n            for (const element of nodeList) {\n                element.setAttribute(\n                    `data-${DarkMode.DATA_SELECTOR}`,\n                    darkMode ? DarkMode.VALUE_DARK : DarkMode.VALUE_LIGHT\n                )\n            }\n        }\n\n        if (doSave) {\n            this.saveValue(\n                DarkMode.DATA_KEY,\n                darkMode ? DarkMode.VALUE_DARK : DarkMode.VALUE_LIGHT\n            )\n        }\n    }\n\n    /**\n     * Toggles the color scheme in the `<HTML>` tag as a class called either `light` or `dark`\n     * based on the inverse of it's prior state.\n     *\n     * When {@link #dataSelector} is set, this is set in the given data selector as the data value.\n     *\n     * *(See {@link #setDarkMode})*\n     *\n     * @example <caption>Bind an UI Element `click` event to toggle dark mode</caption>\n     * document.querySelector('#darkmode-button').onclick = function(e){\n     *   darkmode.toggleDarkMode();\n     * }\n     *\n     * @returns {void} - Nothing, assumes success\n     */\n    toggleDarkMode(doSave = true) {\n        const node = document.querySelector(`[data-${DarkMode.DATA_SELECTOR}]`)\n        const dm =\n            node ?\n                node.getAttribute(`data-${DarkMode.DATA_SELECTOR}`) ===\n                DarkMode.VALUE_DARK :\n                this.documentRoot.getAttribute(\n                    `data-${DarkMode.DATA_SELECTOR}`\n                ) === DarkMode.VALUE_DARK\n        this.setDarkMode(!dm, doSave)\n    }\n\n    /**\n     * Clears the persistance state of the module and resets the document to the default mode.\n     *\n     * Calls {@link #eraseValue} to erase any saved value, and then\n     * calls {@link #getPreferedColorScheme} to retrieve the `prefers-color-scheme` media query,\n     * passing its value to {@link #setDarkMode} to reset the users preference.\n     *\n     * @example <caption>Bind a reset UI Element `click` event to reset the dark mode </caption>\n     * document.querySelector('#darkmode-forget').onclick = function(e){\n     *   darkmode.resetDarkMode();\n     * }\n     *\n     * @returns {void} - Nothing, no error handling is performed.\n     */\n    resetDarkMode() {\n        this.eraseValue(DarkMode.DATA_KEY)\n        const dm = this.getPreferedColorScheme()\n        if (dm) {\n            this.setDarkMode(dm === DarkMode.VALUE_DARK, false)\n        } else {\n            // make good when `prefers-color-scheme` not supported\n            const nodeList = document.querySelectorAll(\n                `[data-${DarkMode.DATA_SELECTOR}]`\n            )\n            if (nodeList.length === 0) {\n                this.documentRoot.setAttribute(\n                    `data-${DarkMode.DATA_SELECTOR}`,\n                    ''\n                )\n            } else {\n                for (const element of nodeList) {\n                    element.setAttribute(`data-${DarkMode.DATA_SELECTOR}`, '')\n                }\n            }\n        }\n    }\n\n    /**\n     * Gets the current color-scheme from the document `<HTML>` tag\n     *\n     * @returns {string} -- The current value, either `light` or `dark`, or an empty string if not present\n     */\n    static getColorScheme() {\n        const node = document.querySelector(`[data-${DarkMode.DATA_SELECTOR}]`)\n        if (!node) {\n            const data = darkmode.documentRoot.getAttribute(\n                `data-${DarkMode.DATA_SELECTOR}`\n            )\n            // exact match only\n            return (\n                data === DarkMode.VALUE_DARK ||\n                        data === DarkMode.VALUE_LIGHT\n            ) ?\n                data :\n                ''\n        }\n\n        const data = node.getAttribute(`data-${DarkMode.DATA_SELECTOR}`)\n        // exact match only\n        return data === DarkMode.VALUE_DARK || data === DarkMode.VALUE_LIGHT ?\n            data :\n            ''\n    }\n\n    /**\n     * ***static*** -- function called by the media query on change event.\n     *\n     * First retrieves any persistent/saved value, and if present ignores the event, but\n     * if not set then triggers the {@link #setDarkMode} function to change the current mode.\n     *\n     * @returns {void} -- Nothing, assumes success\n     */\n    static updatePreferedColorSchemeEvent() {\n        let dm = darkmode.getSavedColorScheme()\n        if (!dm) {\n            dm = darkmode.getPreferedColorScheme()\n            if (dm) {\n                darkmode.setDarkMode(dm === DarkMode.VALUE_DARK, false)\n            }\n        }\n    }\n\n    /**\n     * ***static*** -- function called when the DOM finishes loading.\n     *\n     * Does all the DarkMode initialization, including:\n     * * Loading any prior stored preference (GDPR consent is ***not*** assumed)\n     * * else, honoring any `<HTML>` tag `data-bs-theme=\"dark|light\"` that Server-Side may set\n     * * else, honoring the browser / OS `prefers-color-scheme` preference\n     * and setting the derived mode by calling {@link #setDarkMode}\n     *\n     * Followed by setting up the media query on change event\n     *\n     * ***Warning:*** This function is automatically called when loading this module.\n     *\n     * @returns {void}\n     */\n    static onDOMContentLoaded() {\n        let pref = darkmode.readValue(DarkMode.DATA_KEY)\n        if (!pref) {\n            // user has not set pref. so get from `<HTML>` tag in case developer has set pref.\n            pref = DarkMode.getColorScheme()\n            if (!pref) {\n                // when all else fails, get pref. from OS/browser\n                pref = darkmode.getPreferedColorScheme()\n            }\n        }\n\n        const dm = pref === DarkMode.VALUE_DARK\n\n        // initialize the `HTML` tag\n        darkmode.setDarkMode(dm, false)\n\n        // update every time it changes\n        if (window.matchMedia) {\n            window\n                .matchMedia('(prefers-color-scheme: dark)')\n                .addEventListener('change', () => {\n                    DarkMode.updatePreferedColorSchemeEvent()\n                })\n        }\n    }\n}\n\n/**\n * ***const*** -- This is the global instance (object) of the DarkMode class.\n */\nconst darkmode = new DarkMode()\nwindow.darkmode = darkmode\nexport default darkmode\n"],"names":["DarkMode","inDarkMode","getColorScheme","VALUE_DARK","val","setDarkMode","hasGDPRConsent","_hasGDPRConsent","prior","readCookie","DATA_KEY","saveCookie","localStorage","setItem","getItem","removeItem","documentRoot","document","getElementsByTagName","constructor","cookieExpiry","readyState","addEventListener","onDOMContentLoaded","name","value","days","exp","date","Date","setTime","getTime","toUTCString","cookie","saveValue","n","parts","split","part_","part","trim","startsWith","slice","length","readValue","ret","eraseValue","getSavedColorScheme","getPreferedColorScheme","window","matchMedia","matches","VALUE_LIGHT","darkMode","doSave","nodeList","querySelectorAll","DATA_SELECTOR","setAttribute","element","toggleDarkMode","node","querySelector","dm","getAttribute","resetDarkMode","data","darkmode","updatePreferedColorSchemeEvent","pref"],"mappings":";;;;;;;;;;;IAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMA,QAAQ,CAAC;IAaX;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACI,IAAIC,UAAUA,GAAG;QACb,OAAOD,QAAQ,CAACE,cAAc,EAAE,KAAKF,QAAQ,CAACG,UAAU;IAC5D;MAEA,IAAIF,UAAUA,CAACG,GAAG,EAAE;IAChB,IAAA,IAAI,CAACC,WAAW,CAACD,GAAG,EAAE,KAAK,CAAC;IAChC;;IAEA;;IAGA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACI,IAAIE,cAAcA,GAAG;QACjB,OAAO,IAAI,CAACC,eAAe;IAC/B;MAEA,IAAID,cAAcA,CAACF,GAAG,EAAE;QACpB,IAAI,CAACG,eAAe,GAAGH,GAAG;IAC1B,IAAA,IAAIA,GAAG,EAAE;IACL;UACA,MAAMI,KAAK,GAAGR,QAAQ,CAACS,UAAU,CAACT,QAAQ,CAACU,QAAQ,CAAC;IACpD,MAAA,IAAIF,KAAK,EAAE;YACPR,QAAQ,CAACW,UAAU,CAACX,QAAQ,CAACU,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC;YAC9CE,YAAY,CAACC,OAAO,CAACb,QAAQ,CAACU,QAAQ,EAAEF,KAAK,CAAC;IAClD;IACJ,KAAC,MAAM;IACH;UACA,MAAMA,KAAK,GAAGI,YAAY,CAACE,OAAO,CAACd,QAAQ,CAACU,QAAQ,CAAC;IACrD,MAAA,IAAIF,KAAK,EAAE;IACPI,QAAAA,YAAY,CAACG,UAAU,CAACf,QAAQ,CAACU,QAAQ,CAAC;YAC1CV,QAAQ,CAACW,UAAU,CAACX,QAAQ,CAACU,QAAQ,EAAEF,KAAK,CAAC;IACjD;IACJ;IACJ;;IAEA;;IAGA;IACJ;IACA;MACI,IAAIQ,YAAYA,GAAG;QACf,OAAOC,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACnD;;IAEA;IACJ;IACA;IACA;IACIC,EAAAA,WAAWA,GAAG;QAAA,IAlDdZ,CAAAA,eAAe,GAAG,KAAK;QAAA,IAqCvBa,CAAAA,YAAY,GAAG,GAAG;IAcd,IAAA,IAAIH,QAAQ,CAACI,UAAU,KAAK,SAAS,EAAE;IACnCJ,MAAAA,QAAQ,CAACK,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;YAChDtB,QAAQ,CAACuB,kBAAkB,EAAE;IACjC,OAAC,CAAC;IACN,KAAC,MAAM;UACHvB,QAAQ,CAACuB,kBAAkB,EAAE;IACjC;IACJ;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACI,OAAOZ,UAAUA,CAACa,IAAI,EAAEC,KAAK,GAAG,EAAE,EAAEC,IAAI,GAAG,GAAG,EAAE;QAC5C,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAA,IAAID,IAAI,EAAE;IACN,MAAA,MAAME,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvBD,MAAAA,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,EAAE,GAAIL,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK,CAAC;IAC3DC,MAAAA,GAAG,GAAG,CAAaC,UAAAA,EAAAA,IAAI,CAACI,WAAW,EAAE,CAAE,CAAA;IAC3C;QAEAf,QAAQ,CAACgB,MAAM,GAAG,CAAA,EAAGT,IAAI,CAAIC,CAAAA,EAAAA,KAAK,CAAGE,EAAAA,GAAG,CAA2B,yBAAA,CAAA;IACvE;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;MACIO,SAASA,CAACV,IAAI,EAAEC,KAAK,EAAEC,IAAI,GAAG,IAAI,CAACN,YAAY,EAAE;QAC7C,IAAI,IAAI,CAACd,cAAc,EAAE;IACrB;UACAN,QAAQ,CAACW,UAAU,CAACa,IAAI,EAAEC,KAAK,EAAEC,IAAI,CAAC;IAC1C,KAAC,MAAM;IACH;IACAd,MAAAA,YAAY,CAACC,OAAO,CAACW,IAAI,EAAEC,KAAK,CAAC;IACrC;IACJ;;IAEA;IACJ;IACA;IACA;MACI,OAAOhB,UAAUA,CAACe,IAAI,EAAE;IACpB,IAAA,MAAMW,CAAC,GAAG,CAAGX,EAAAA,IAAI,CAAG,CAAA,CAAA;QACpB,MAAMY,KAAK,GAAGnB,QAAQ,CAACgB,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC;IAExC,IAAA,KAAK,MAAMC,KAAK,IAAIF,KAAK,EAAE;IACvB,MAAA,MAAMG,IAAI,GAAGD,KAAK,CAACE,IAAI,EAAE;IACzB,MAAA,IAAID,IAAI,CAACE,UAAU,CAACN,CAAC,CAAC,EAAE;IACpB;IACA,QAAA,OAAOI,IAAI,CAACG,KAAK,CAACP,CAAC,CAACQ,MAAM,CAAC;IAC/B;IACJ;IAEA,IAAA,OAAO,EAAE;IACb;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;MACIC,SAASA,CAACpB,IAAI,EAAE;QACZ,IAAI,IAAI,CAAClB,cAAc,EAAE;IACrB,MAAA,OAAON,QAAQ,CAACS,UAAU,CAACe,IAAI,CAAC;IACpC;IAEA,IAAA,MAAMqB,GAAG,GAAGjC,YAAY,CAACE,OAAO,CAACU,IAAI,CAAC;IACtC,IAAA,OAAOqB,GAAG,IAAA,IAAA,GAAHA,GAAG,GAAI,EAAE;IACpB;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;MACIC,UAAUA,CAACtB,IAAI,EAAE;QACb,IAAI,IAAI,CAAClB,cAAc,EAAE;UACrB,IAAI,CAAC4B,SAAS,CAACV,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;IAChC,KAAC,MAAM;IACHZ,MAAAA,YAAY,CAACG,UAAU,CAACS,IAAI,CAAC;IACjC;IACJ;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACIuB,EAAAA,mBAAmBA,GAAG;QAClB,MAAM3C,GAAG,GAAG,IAAI,CAACwC,SAAS,CAAC5C,QAAQ,CAACU,QAAQ,CAAC;IAC7C,IAAA,OAAON,GAAG,IAAA,IAAA,GAAHA,GAAG,GAAI,EAAE;IACpB;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACI4C,EAAAA,sBAAsBA,GAAG;IACrB,IAAA,IACIC,MAAM,CAACC,UAAU,IACjBD,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAC3D;UACE,OAAOnD,QAAQ,CAACG,UAAU;IAC9B;IAEA,IAAA,IACI8C,MAAM,CAACC,UAAU,IACjBD,MAAM,CAACC,UAAU,CAAC,+BAA+B,CAAC,CAACC,OAAO,EAC5D;UACE,OAAOnD,QAAQ,CAACoD,WAAW;IAC/B;IAEA,IAAA,OAAO,EAAE;IACb;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACI/C,EAAAA,WAAWA,CAACgD,QAAQ,EAAEC,MAAM,GAAG,IAAI,EAAE;QACjC,MAAMC,QAAQ,GAAGtC,QAAQ,CAACuC,gBAAgB,CACtC,CAAA,MAAA,EAASxD,QAAQ,CAACyD,aAAa,CAAA,CAAA,CACnC,CAAC;IAED,IAAA,IAAIF,QAAQ,CAACZ,MAAM,KAAK,CAAC,EAAE;UACvB,IAAI,CAAC3B,YAAY,CAAC0C,YAAY,CAC1B,CAAQ1D,KAAAA,EAAAA,QAAQ,CAACyD,aAAa,CAAA,CAAE,EAChCJ,QAAQ,GAAGrD,QAAQ,CAACG,UAAU,GAAGH,QAAQ,CAACoD,WAC9C,CAAC;IACL,KAAC,MAAM;IACH,MAAA,KAAK,MAAMO,OAAO,IAAIJ,QAAQ,EAAE;IAC5BI,QAAAA,OAAO,CAACD,YAAY,CAChB,QAAQ1D,QAAQ,CAACyD,aAAa,CAAE,CAAA,EAChCJ,QAAQ,GAAGrD,QAAQ,CAACG,UAAU,GAAGH,QAAQ,CAACoD,WAC9C,CAAC;IACL;IACJ;IAEA,IAAA,IAAIE,MAAM,EAAE;IACR,MAAA,IAAI,CAACpB,SAAS,CACVlC,QAAQ,CAACU,QAAQ,EACjB2C,QAAQ,GAAGrD,QAAQ,CAACG,UAAU,GAAGH,QAAQ,CAACoD,WAC9C,CAAC;IACL;IACJ;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACIQ,EAAAA,cAAcA,CAACN,MAAM,GAAG,IAAI,EAAE;QAC1B,MAAMO,IAAI,GAAG5C,QAAQ,CAAC6C,aAAa,CAAC,CAAA,MAAA,EAAS9D,QAAQ,CAACyD,aAAa,CAAA,CAAA,CAAG,CAAC;IACvE,IAAA,MAAMM,EAAE,GACJF,IAAI,GACAA,IAAI,CAACG,YAAY,CAAC,CAAA,KAAA,EAAQhE,QAAQ,CAACyD,aAAa,CAAE,CAAA,CAAC,KACnDzD,QAAQ,CAACG,UAAU,GACnB,IAAI,CAACa,YAAY,CAACgD,YAAY,CAC1B,CAAA,KAAA,EAAQhE,QAAQ,CAACyD,aAAa,CAClC,CAAA,CAAC,KAAKzD,QAAQ,CAACG,UAAU;IACjC,IAAA,IAAI,CAACE,WAAW,CAAC,CAAC0D,EAAE,EAAET,MAAM,CAAC;IACjC;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACIW,EAAAA,aAAaA,GAAG;IACZ,IAAA,IAAI,CAACnB,UAAU,CAAC9C,QAAQ,CAACU,QAAQ,CAAC;IAClC,IAAA,MAAMqD,EAAE,GAAG,IAAI,CAACf,sBAAsB,EAAE;IACxC,IAAA,IAAIe,EAAE,EAAE;UACJ,IAAI,CAAC1D,WAAW,CAAC0D,EAAE,KAAK/D,QAAQ,CAACG,UAAU,EAAE,KAAK,CAAC;IACvD,KAAC,MAAM;IACH;UACA,MAAMoD,QAAQ,GAAGtC,QAAQ,CAACuC,gBAAgB,CACtC,CAAA,MAAA,EAASxD,QAAQ,CAACyD,aAAa,CAAA,CAAA,CACnC,CAAC;IACD,MAAA,IAAIF,QAAQ,CAACZ,MAAM,KAAK,CAAC,EAAE;IACvB,QAAA,IAAI,CAAC3B,YAAY,CAAC0C,YAAY,CAC1B,CAAA,KAAA,EAAQ1D,QAAQ,CAACyD,aAAa,CAAA,CAAE,EAChC,EACJ,CAAC;IACL,OAAC,MAAM;IACH,QAAA,KAAK,MAAME,OAAO,IAAIJ,QAAQ,EAAE;cAC5BI,OAAO,CAACD,YAAY,CAAC,CAAQ1D,KAAAA,EAAAA,QAAQ,CAACyD,aAAa,CAAA,CAAE,EAAE,EAAE,CAAC;IAC9D;IACJ;IACJ;IACJ;;IAEA;IACJ;IACA;IACA;IACA;MACI,OAAOvD,cAAcA,GAAG;QACpB,MAAM2D,IAAI,GAAG5C,QAAQ,CAAC6C,aAAa,CAAC,CAAA,MAAA,EAAS9D,QAAQ,CAACyD,aAAa,CAAA,CAAA,CAAG,CAAC;QACvE,IAAI,CAACI,IAAI,EAAE;IACP,MAAA,MAAMK,IAAI,GAAGC,QAAQ,CAACnD,YAAY,CAACgD,YAAY,CAC3C,CAAQhE,KAAAA,EAAAA,QAAQ,CAACyD,aAAa,EAClC,CAAC;IACD;IACA,MAAA,OACIS,IAAI,KAAKlE,QAAQ,CAACG,UAAU,IACpB+D,IAAI,KAAKlE,QAAQ,CAACoD,WAAW,GAErCc,IAAI,GACJ,EAAE;IACV;QAEA,MAAMA,IAAI,GAAGL,IAAI,CAACG,YAAY,CAAC,CAAA,KAAA,EAAQhE,QAAQ,CAACyD,aAAa,CAAA,CAAE,CAAC;IAChE;IACA,IAAA,OAAOS,IAAI,KAAKlE,QAAQ,CAACG,UAAU,IAAI+D,IAAI,KAAKlE,QAAQ,CAACoD,WAAW,GAChEc,IAAI,GACJ,EAAE;IACV;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;MACI,OAAOE,8BAA8BA,GAAG;IACpC,IAAA,IAAIL,EAAE,GAAGI,QAAQ,CAACpB,mBAAmB,EAAE;QACvC,IAAI,CAACgB,EAAE,EAAE;IACLA,MAAAA,EAAE,GAAGI,QAAQ,CAACnB,sBAAsB,EAAE;IACtC,MAAA,IAAIe,EAAE,EAAE;YACJI,QAAQ,CAAC9D,WAAW,CAAC0D,EAAE,KAAK/D,QAAQ,CAACG,UAAU,EAAE,KAAK,CAAC;IAC3D;IACJ;IACJ;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACI,OAAOoB,kBAAkBA,GAAG;QACxB,IAAI8C,IAAI,GAAGF,QAAQ,CAACvB,SAAS,CAAC5C,QAAQ,CAACU,QAAQ,CAAC;QAChD,IAAI,CAAC2D,IAAI,EAAE;IACP;IACAA,MAAAA,IAAI,GAAGrE,QAAQ,CAACE,cAAc,EAAE;UAChC,IAAI,CAACmE,IAAI,EAAE;IACP;IACAA,QAAAA,IAAI,GAAGF,QAAQ,CAACnB,sBAAsB,EAAE;IAC5C;IACJ;IAEA,IAAA,MAAMe,EAAE,GAAGM,IAAI,KAAKrE,QAAQ,CAACG,UAAU;;IAEvC;IACAgE,IAAAA,QAAQ,CAAC9D,WAAW,CAAC0D,EAAE,EAAE,KAAK,CAAC;;IAE/B;QACA,IAAId,MAAM,CAACC,UAAU,EAAE;UACnBD,MAAM,CACDC,UAAU,CAAC,8BAA8B,CAAC,CAC1C5B,gBAAgB,CAAC,QAAQ,EAAE,MAAM;YAC9BtB,QAAQ,CAACoE,8BAA8B,EAAE;IAC7C,OAAC,CAAC;IACV;IACJ;IACJ;;IAEA;IACA;IACA;IAnbI;IADEpE,QAAQ,CAEHU,QAAQ,GAAG,qBAAqB;IAEvC;IAJEV,QAAQ,CAKHyD,aAAa,GAAG,UAAU;IAEjC;IAPEzD,QAAQ,CAQHoD,WAAW,GAAG,OAAO;IAE5B;IAVEpD,QAAQ,CAWHG,UAAU,GAAG,MAAM;AA0a9B,UAAMgE,QAAQ,GAAG,IAAInE,QAAQ;IAC7BiD,MAAM,CAACkB,QAAQ,GAAGA,QAAQ;;;;;;;;"}